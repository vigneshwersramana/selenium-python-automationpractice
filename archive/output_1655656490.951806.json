{"content": {"suites": {"0": {"status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_bookAppointment[getData0]", "rerun": "0"}}, "suite_name": "tests/test_bookAppointment.py"}, "1": {"suite_name": "tests/test_login.py", "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_login[getData0]>>\n\n    @pytest.fixture(scope=\"class\")\n    def setup(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n        elif browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=Base.ROOT_PATH + \"/resources/geckodriver\")\n        elif browser_name == \"ie\":\n            driver = webdriver.Ie(executable_path=Base.ROOT_PATH + \"/resources/IEDriverServer.exe\")\n    \n>       driver.get(\"http://demoaut.katalon.com\") # get the url from conf file\n\ntests/conftest.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:442: in get\n    self.execute(Command.GET, {'url': url})\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fad21de43d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...ff80c8af4e1 _pthread_start + 125\\\\n31  libsystem_pthread.dylib             0x00007ff80c8aaf6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from unknown error: cannot determine loading status\nE       from disconnected: received Inspector.detached event\nE         (Session info: chrome=102.0.5005.115)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010414cd19 chromedriver + 5197081\nE       1   chromedriver                        0x00000001040dab23 chromedriver + 4729635\nE       2   chromedriver                        0x0000000103cb82b8 chromedriver + 393912\nE       3   chromedriver                        0x0000000103ca3e0d chromedriver + 310797\nE       4   chromedriver                        0x0000000103ca38ca chromedriver + 309450\nE       5   chromedriver                        0x0000000103ca2e57 chromedriver + 306775\nE       6   chromedriver                        0x0000000103ca1d5a chromedriver + 302426\nE       7   chromedriver                        0x0000000103ca225c chromedriver + 303708\nE       8   chromedriver                        0x0000000103cb1bf5 chromedriver + 367605\nE       9   chromedriver                        0x0000000103ca367d chromedriver + 308861\nE       10  chromedriver                        0x0000000103ca442d chromedriver + 312365\nE       11  chromedriver                        0x0000000103ca38e7 chromedriver + 309479\nE       12  chromedriver                        0x0000000103ca2e57 chromedriver + 306775\nE       13  chromedriver                        0x0000000103ca1d5a chromedriver + 302426\nE       14  chromedriver                        0x0000000103ca225c chromedriver + 303708\nE       15  chromedriver                        0x0000000103cb066f chromedriver + 362095\nE       16  chromedriver                        0x0000000103cb11d2 chromedriver + 365010\nE       17  chromedriver                        0x0000000103cbf5fe chromedriver + 423422\nE       18  chromedriver                        0x0000000103d1d517 chromedriver + 808215\nE       19  chromedriver                        0x0000000103d0a6f3 chromedriver + 730867\nE       20  chromedriver                        0x0000000103ce0a49 chromedriver + 559689\nE       21  chromedriver                        0x0000000103ce1a75 chromedriver + 563829\nE       22  chromedriver                        0x000000010411ebdd chromedriver + 5008349\nE       23  chromedriver                        0x0000000104123b64 chromedriver + 5028708\nE       24  chromedriver                        0x0000000104128bcf chromedriver + 5049295\nE       25  chromedriver                        0x00000001041247ca chromedriver + 5031882\nE       26  chromedriver                        0x00000001040fe59f chromedriver + 4875679\nE       27  chromedriver                        0x000000010413e388 chromedriver + 5137288\nE       28  chromedriver                        0x000000010413e50f chromedriver + 5137679\nE       29  chromedriver                        0x0000000104154085 chromedriver + 5226629\nE       30  libsystem_pthread.dylib             0x00007ff80c8af4e1 _pthread_start + 125\nE       31  libsystem_pthread.dylib             0x00007ff80c8aaf6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException\n", "test_name": "test_login[getData0]", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}}, "2": {"suite_name": "tests/test_validateFooter.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_validateFooter", "rerun": "0"}}, "status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 0}}, "3": {"suite_name": "tests/test_validateTitle.py", "tests": {"0": {"status": "FAIL", "message": "   AssertionError: assert 'CURA Healthcare Service' == 'CURA Healthcare'\n     - CURA Healthcare\n     + CURA Healthcare Service\n     ?                ++++++++\n", "test_name": "test_validateTitle[getData0]", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 1, "total_error": 0}}}}, "date": "June 19, 2022", "start_time": 1655623211.353534, "total_suite": 4, "status": "FAIL", "status_list": {"pass": "2", "fail": "1", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "4"}